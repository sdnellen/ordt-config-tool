#!/usr/bin/python3
'''
file parse to cfg model

TODO...
- vars:
  - handle var assign (paths, integers, data w/ size)
- functions:
  - store function return type
  - handle implicit return for last Expr child

@author: snellenbach
'''
import sys
from enum import Enum, auto
from datetime import datetime
from cfg.model.Utils import MsgUtils
from cfg.model.RegModelWrapper import RegModelWrapper
from cfg.extract.cfg.CfgExtractor import CfgExtractor
from cfg.extract.pyf1.PyF1Extractor import PyF1Extractor
from cfg.output.PyF1OutBuilder import PyF1OutBuilder
from cfg.output.UvmF1OutBuilder import UvmF1OutBuilder

class ConfigFileInputFormat(Enum):
    PYTHON_FORMAT_1 = auto()
    CFGTOOL_FORMAT = auto()
    
class ConfigFileOutputFormat(Enum):
    PYTHON_FORMAT_1 = auto()
    UVM_FORMAT_1 = auto()
    
def getInExtractor(inFormStr, inFileName):
    ''' return an Extractor instance given a type string '''
    try:
        inputType = ConfigFileInputFormat[inFormStr]
    except:
        MsgUtils.errorExit(f'unsupported input format: {inFormStr}')
    
    if inputType == ConfigFileInputFormat.PYTHON_FORMAT_1:
        return PyF1Extractor(inFileName)
    elif inputType == ConfigFileInputFormat.CFGTOOL_FORMAT:
        return CfgExtractor(inFileName)
  
def getOutBuilder(outFormStr, outFileName, headerInfo):
    ''' return an OutBuilder instance given a format string and file name '''
    try:
        outputType = ConfigFileOutputFormat[outFormStr]
    except:
        MsgUtils.errorExit(f'unsupported output format: {outFormStr}')
            
    if outputType == ConfigFileOutputFormat.PYTHON_FORMAT_1:
        return PyF1OutBuilder(outFileName, headerInfo)
    elif outputType == ConfigFileOutputFormat.UVM_FORMAT_1:
        return UvmF1OutBuilder(outFileName, headerInfo)
           
def main(argv):
    version = 0.0
    
    # --------------- inputs
    testDir = '/Users/snellenbach/eclipse-workspace/Config/test/'
    #inFileName = testDir + 'cfg_input/test.cg'
    inFileName = testDir + 'cfg_input/simple.cg'
    inFormStr = 'CFGTOOL_FORMAT'
    #inFileName = testDir + 'pyf1_input/yt_config.py'
    #inFileName = testDir + 'pyf1_input/yt_config_mini.py'
    #inFormStr = 'PYTHON_FORMAT_1'
    outFormStr = 'PYTHON_FORMAT_1'
    outFileName = testDir + 'output/output.py'
    regmodFileName = testDir + 'cfg_input/regmod.py'

    # create header info
    headerInfo = []
    headerInfo.append(f'CfgTool {version} autogenerated file')
    headerInfo.append(f'Config Input: {inFileName} (type = {inFormStr})')
    headerInfo.append(f'Register Model Input: {regmodFileName}')
    headerInfo.append(f'Settings: TBD')
    headerInfo.append(f'Date {datetime.now()}')
    
    # extract based on input format
    extractor = getInExtractor(inFormStr, inFileName)
    
    # get root of extracted config model 
    model = extractor.getModel()
    # display config model contents
    model.display(0)
    
    # import the ordt py regmodel from file
    RegModelWrapper.importRegModel(regmodFileName)
        
    # extract version tags from reg model and annotate config model paths
    print(f'\nCfgTool: extracted regModel tags={RegModelWrapper.getAllRegModelTags()}):')
    model.resolvePaths()
    
    # generate output
    outBuilder = getOutBuilder(outFormStr, outFileName, headerInfo)
    model.setOutBuilder(outBuilder)
    model.generateOutput()
 
if __name__ == '__main__':
    main(sys.argv)

